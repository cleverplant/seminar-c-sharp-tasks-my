int.MaxValue; Такие свойства называются статическими
var MaxValue; динамические
-------------------------------------------------------------
int.MaxValue = 255; <- жестко пирвязаны к типу int
byte.MaxValue = 255;<- жестко пирвязаны к типу byte
var MaxValue = 255; <- можно как число
var MaxValue = "255"; <- можно как строку
-------------------------------------------------------------
Convert.ToInt32
-------------------------------------------------------------
string toto = "7";
int momo = Convert.ToInt32(toto);
-------------------------------------------------------------
Свойства - Скобочки не надо. 
           Так как свойства вызываются без скобочек, их нельзя вызывать с параметрами.
Метод    - Скобочки надо
------------------------------------------------------------
Console.WriteLine(); консоль нам пишет - типа принт в пайтон
Console.ReadLine();  консоль нас читает - типа Х.З. в пайтон

------------------------------------------------------------
.ToLower(); нижний регистр
.ToUpper(); верхний регистр

----------------------------------------------------------------------------
IndexOf('B'); Находит номер указанного символа
---------------------------------------------------------------------------
var name = "Bran";                    | 
                                      |  выводит число
name.IndexOf('B'); // 0               |
Console.WriteLine(name.IndexOf('B'));// 0

-----------------------------------------------------------------------------
.Length; Свойство Length - возвращает длину строки
-----------------------------------------------------------------------------
var company = "Hexlet".Length;        |  выводит число
Console.WriteLine(company); // => 6   |  

------------------------------------------------------------------------------
"____"[N] вызов индексатора у строки получает символ с соответствующим номером
-------------------------------------------------------------------------------
"Bran"[0];  // 'B'                    |
"Bran"[3];  // 'n'                    | выводит буквы
Console.WriteLine("Bran"[0]);         | 
Console.WriteLine("Bran"[3]);         |

-------------------------------------------------------------------------------
.Substring(1);  метод извлекающий подстроку (часть строки) из строки
                Для извлечения частей слова
-------------------------------------------------------------------------------
"Bran".Substring(1); // "ran"
"Bran".Substring(1, 2); // "ra" <-             |
"Bran".Substring(1, 3); // "ran"               | выводит буквы
"Bran".Substring(2, 2); // "an" <-             |
Console.WriteLine("Bran".Substring(1));
Console.WriteLine("Bran".Substring(1, 2));
Console.WriteLine("Bran".Substring(1, 3));
Console.WriteLine("Bran".Substring(2, 2)); 

--------------------------------------------------------------------------------
string.Insert(11, Word); - вставляет строку в строку (раздел: Стандартная библиотека)
-------------------------------------------------------------------------------
var war = "War of the Kings";
var missingWord = "Five ";
Console.WriteLine(war.Insert(11, missingWord)); // Вывод: " War of the Five Kings"

--------------------------------------------------------------------------------
Trim(); Удаление концевых пробельных символов
--------------------------------------------------------------------------------
email = email.Trim();
email = email.ToLower();
Console.WriteLine(email);

--------------------------------------------------------------------------------
.Replace(); Заменяем ___ на ____
--------------------------------------------------------------------------------
name = name.Replace("?", ""); // Удаляем вопрос
name = name.Replace(" ", "-"); // Заменяем пробелы на дефис

--------------------------------------------------------------------------------
File.ReadAllText("readme.txt"); // Чтение текста из указанного файла
file.Exists(); // проверка того, что файл существует
--------------------------------------------------------------------------------






